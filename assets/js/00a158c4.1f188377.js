"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[395],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=o,h=m["".concat(p,".").concat(d)]||m[d]||l[d]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3576:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={sidebar_position:5},p="Metrics",c={unversionedId:"operations/metrics",id:"operations/metrics",isDocsHomePage:!1,title:"Metrics",description:"Recommended packages",source:"@site/docs/operations/metrics.md",sourceDirName:"operations",slug:"/operations/metrics",permalink:"/nodejs-reference-architecture/operations/metrics",editUrl:"https://github.com/nodeshift/nodejs-reference-architecture/docs/operations/metrics.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/nodejs-reference-architecture/operations/logging"}},u=[{value:"Recommended packages",id:"recommended-packages",children:[]},{value:"Guidance",id:"guidance",children:[]}],l={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"metrics"},"Metrics"),(0,a.kt)("h2",{id:"recommended-packages"},"Recommended packages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/prom-client"},"prom-client"),". With >300k weekly downloads\nprom-client is both the most used and most flexible prometheus client. It also has\na shallow dependency tree.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/express-prom-bundle"},"express-prom-bundle"),", version 5\nor later. It is based on prom-client and if you are using the Express web\nframework this is a good way to export prometheus metrics. It's more succinct\nto use to get started, but also more opinionated. Its a reasonable option\nuntil/unless more control or custom metrics are needed."))),(0,a.kt)("h2",{id:"guidance"},"Guidance"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Export prometheus endpoints for containers running Node.js applications. Without\nthese end points it can be difficult monitor your applications. Prometheus is\nthe defacto standard for exposing metrics in Cloud Native applications. Further\nCloud Native infrastructure (Kubernetes distributions) make it easily to collect\nprometheus metrics and it is also easy to collect and graph even if you need\nto install the infrastructure components.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Collect and monitor "RED" metrics. Details are available in'),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://medium.com/faun/how-to-monitor-the-sre-golden-signals-1391cadc7524"},"https://medium.com/faun/how-to-monitor-the-sre-golden-signals-1391cadc7524")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/"},"https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For HTTP expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"RED")," metrics as:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"request rate - requests which are handled ok (status code==2xx). Expose this as the total\ncount."),(0,a.kt)("li",{parentName:"ul"},"error rate - requests which are not handled ok ( status code!=2xx). Expose this metric\nas a percentage of the total rate."),(0,a.kt)("li",{parentName:"ul"},"request latency - duration of requests which are handled ok, grouped into ranges/buckets and\nexposed through a prometheus histogram."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/csantanapr/prometheus-nodejs-tutorial"},"prometheus-nodejs-tutorial")," provides\nexamples of using prom-client and express-prom-bundle to collect metrics. Lab 3 and 6\nshow how to generate the http_request_duration_seconds_bucket metric."),(0,a.kt)("p",{parentName:"li"},"Configure prometheus middleware as the first middleware to start the timer as soon as possible.\nWhen setting up the middleware define your expose route for metrics ",(0,a.kt)("inlineCode",{parentName:"p"},"/metrics")," before activating the middleware\nto avoid calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"/metrics")," to be counted as part of the metrics, you can do the same for\nliveness and readiness checks to define them before prometheus middleware if you want to discard them from your\nhttp metrics calculations."),(0,a.kt)("p",{parentName:"li"},"For success rate the prometheus query would be\n",(0,a.kt)("inlineCode",{parentName:"p"},'sum(rate(http_request_duration_seconds_count{code="2xx", app="myapp"}[5m]))'),".\nThe sum over all instances, the rate of change of the request count for app\nmy app with status_code 2xx over a 5m window"),(0,a.kt)("p",{parentName:"li"},"For error rate, but the status_code is usually 4xx or 5xx expressed as ","[45]","xx. The\nprometheus query would be ",(0,a.kt)("inlineCode",{parentName:"p"},'sum(rate(http_request_duration_seconds_count{code="[45]xx", app="myapp"}[5m]))'),"."),(0,a.kt)("p",{parentName:"li"},"For duration, or latency the metric is a histogram so you will graph and\nmonitor percentiles instead of a summary. For example, the prometheus query would be\nto get the 95 percentile over all instances over 5m window would be\n",(0,a.kt)("inlineCode",{parentName:"p"},'histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{code="2xx", app="myapp"}[5m]))'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Export additional custom metrics to provide key attributes about the operation of\nyour application which are not part of the standard metrics.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Be aware that the prometheus client instance needs to be a singleton within your app. For example, if your\napplication imports separate packages that utilize the "prom-client" package, like customized RabbitMQ &\nRedis drivers that write metrics to prom-client, you need to make sure they use the same prom-client instance.\nA common way to do that is to make the prom-client instance as an optional parameter in the constructor for\nthose drivers, and then your app can pass in the same prom-client instance into both.'))))}m.isMDXComponent=!0}}]);